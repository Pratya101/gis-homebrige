{"remainingRequest":"/Users/pratyaphocha/village-servay/node_modules/thread-loader/dist/cjs.js!/Users/pratyaphocha/village-servay/node_modules/babel-loader/lib/index.js!/Users/pratyaphocha/village-servay/node_modules/eslint-loader/index.js??ref--13-0!/Users/pratyaphocha/village-servay/src/services/axios.js","dependencies":[{"path":"/Users/pratyaphocha/village-servay/src/services/axios.js","mtime":1623036518000},{"path":"/Users/pratyaphocha/village-servay/node_modules/cache-loader/dist/cjs.js","mtime":1626176668222},{"path":"/Users/pratyaphocha/village-servay/node_modules/thread-loader/dist/cjs.js","mtime":1626176668505},{"path":"/Users/pratyaphocha/village-servay/node_modules/babel-loader/lib/index.js","mtime":1626179369206},{"path":"/Users/pratyaphocha/village-servay/node_modules/eslint-loader/index.js","mtime":1626176668724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/pratyaphocha/village-servay/src/services/axios.js"],"names":["config","axios","require","console","log","baseURLApi","defaults","baseURL","apiService","getToken","payload","path","param","header","respone","Promise","resolve","url","get","headers","Authorization","then","res","data","err","post","body","put","delete"],"mappings":"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","sourcesContent":["import config from \"../config\";\n\nconst axios = require(\"axios\");\nconsole.log(\"config base url :\", config.baseURLApi)\naxios.defaults.baseURL = config.baseURLApi;\nconst apiService = {\n    getToken: function(payload) {\n        try {\n            let { path, param, header } = payload;\n            var respone = new Promise((resolve) => {\n                var url = `${path}${param || param == 0 ? \"/\" + param : \"\"}`;\n                axios\n                    .get(url, {\n                        headers: {\n                            Authorization: !header ? \"\" : header,\n                        }\n                    })\n                    .then(async res => {\n                        console.log(\"res token :\", res.data)\n                        resolve(res.data);\n\n                    });\n            });\n            return respone;\n        } catch (err) {\n            console.log(err);\n            return \"GET ERROR\";\n        }\n    },\n\n\n    post: async function(payload) {\n        try {\n            let { path, body, header } = payload;\n            var respone = await new Promise(function(resolve, ) {\n                axios\n                    .post(`${path}`, body, {\n                        headers: {\n                            Authorization: !header ? \"\" : header\n                        }\n                    })\n                    .then(async res => {\n                        resolve(res.data);\n                    });\n            });\n            return respone;\n        } catch (err) {\n            console.log(err);\n            return \"POST ERROR\";\n        }\n    },\n\n    get: async function(payload) {\n        try {\n            let { path, param, header } = payload;\n            var respone = await new Promise(function(resolve, ) {\n                var url = `${path}${param || param == 0 ? \"/\" + param : \"\"}`;\n                axios\n                    .get(url, {\n                        headers: {\n                            Authorization: !header ? \"\" : header,\n                        }\n                    })\n                    .then(async res => {\n                        resolve(res.data);\n                    });\n            });\n            return respone;\n        } catch (err) {\n            console.log(err);\n            return \"GET ERROR\";\n        }\n    },\n    put: async function(payload) {\n        try {\n            let { path, param, body, header } = payload;\n            var respone = await new Promise(function(resolve, ) {\n                var url = `${path}${param || param == 0 ? \"/\" + param : \"\"}`;\n                axios\n                    .put(url, body, {\n                        headers: {\n                            Authorization: !header ? \"\" : header\n                        }\n                    })\n                    .then(async res => {\n                        resolve(res.data);\n                    });\n            });\n            return respone;\n        } catch (err) {\n            console.log(err);\n            return \"UPDATE ERROR\";\n        }\n    },\n\n    delete: async function(payload) {\n        try {\n            let { path, param, header } = payload;\n            var respone = await new Promise(function(resolve, ) {\n                var url = `${path}${param || param == 0 ? \"/\" + param : \"\"}`;\n                axios\n                    .delete(url, {\n                        headers: {\n                            Authorization: !header ? \"\" : header\n                        }\n                    })\n                    .then(async res => {\n                        resolve(res.data);\n                    });\n            });\n            return respone;\n        } catch (err) {\n            console.log(err);\n            return \"DELETE ERROR\";\n        }\n    }\n};\n\nexport { apiService };"]}]}