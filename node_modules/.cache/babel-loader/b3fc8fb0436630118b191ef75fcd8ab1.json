{"remainingRequest":"/Users/pratyaphocha/village-servay/node_modules/babel-loader/lib/index.js!/Users/pratyaphocha/village-servay/node_modules/eslint-loader/index.js??ref--13-0!/Users/pratyaphocha/village-servay/src/services/axios.js","dependencies":[{"path":"/Users/pratyaphocha/village-servay/src/services/axios.js","mtime":1626545256149},{"path":"/Users/pratyaphocha/village-servay/node_modules/cache-loader/dist/cjs.js","mtime":1626176668222},{"path":"/Users/pratyaphocha/village-servay/node_modules/babel-loader/lib/index.js","mtime":1626179369206},{"path":"/Users/pratyaphocha/village-servay/node_modules/eslint-loader/index.js","mtime":1626176668724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/pratyaphocha/village-servay/src/services/axios.js"],"names":["config","axios","require","defaults","baseURL","baseURLApi","apiService","getToken","payload","path","param","header","respone","Promise","resolve","url","get","headers","Authorization","then","res","console","log","data","err","post","body","put","delete"],"mappings":"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","sourcesContent":["import config from \"../config\";\n\nconst axios = require(\"axios\");\naxios.defaults.baseURL = config.baseURLApi;\nconst apiService = {\n  getToken: function(payload) {\n    try {\n      let { path, param, header } = payload;\n      var respone = new Promise((resolve) => {\n        var url = `${path}${param || param == 0 ? \"/\" + param : \"\"}`;\n        axios\n          .get(url, {\n            headers: {\n              Authorization: !header ? \"\" : header,\n            },\n          })\n          .then(async (res) => {\n            console.log(\"res token :\", res.data);\n            resolve(res.data);\n          });\n      });\n      return respone;\n    } catch (err) {\n      console.log(err);\n      return \"GET ERROR\";\n    }\n  },\n\n  post: async function(payload) {\n    try {\n      let { path, body, header } = payload;\n      var respone = await new Promise(function(resolve) {\n        axios\n          .post(`${path}`, body, {\n            headers: {\n              Authorization: !header ? \"\" : header,\n            },\n          })\n          .then(async (res) => {\n            resolve(res.data);\n          });\n      });\n      return respone;\n    } catch (err) {\n      console.log(err);\n      return \"POST ERROR\";\n    }\n  },\n\n  get: async function(payload) {\n    try {\n      let { path, param, header } = payload;\n      var respone = await new Promise(function(resolve) {\n        var url = `${path}${param || param == 0 ? \"/\" + param : \"\"}`;\n        axios\n          .get(url, {\n            headers: {\n              Authorization: !header ? \"\" : header,\n            },\n          })\n          .then(async (res) => {\n            resolve(res.data);\n          });\n      });\n      return respone;\n    } catch (err) {\n      console.log(err);\n      return \"GET ERROR\";\n    }\n  },\n  put: async function(payload) {\n    try {\n      let { path, param, body, header } = payload;\n      var respone = await new Promise(function(resolve) {\n        var url = `${path}${param || param == 0 ? \"/\" + param : \"\"}`;\n        axios\n          .put(url, body, {\n            headers: {\n              Authorization: !header ? \"\" : header,\n            },\n          })\n          .then(async (res) => {\n            resolve(res.data);\n          });\n      });\n      return respone;\n    } catch (err) {\n      console.log(err);\n      return \"UPDATE ERROR\";\n    }\n  },\n\n  delete: async function(payload) {\n    try {\n      let { path, param, header } = payload;\n      var respone = await new Promise(function(resolve) {\n        var url = `${path}${param || param == 0 ? \"/\" + param : \"\"}`;\n        axios\n          .delete(url, {\n            headers: {\n              Authorization: !header ? \"\" : header,\n            },\n          })\n          .then(async (res) => {\n            resolve(res.data);\n          });\n      });\n      return respone;\n    } catch (err) {\n      console.log(err);\n      return \"DELETE ERROR\";\n    }\n  },\n};\n\nexport { apiService };\n"]}]}