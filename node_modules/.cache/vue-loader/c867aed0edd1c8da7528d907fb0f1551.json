{"remainingRequest":"/Users/pratyaphocha/village-servay/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pratyaphocha/village-servay/src/pages/Dashboard/Dashboard.vue?vue&type=template&id=5d63b5be&","dependencies":[{"path":"/Users/pratyaphocha/village-servay/src/pages/Dashboard/Dashboard.vue","mtime":1626350679767},{"path":"/Users/pratyaphocha/village-servay/node_modules/cache-loader/dist/cjs.js","mtime":1626176668222},{"path":"/Users/pratyaphocha/village-servay/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1626179382467},{"path":"/Users/pratyaphocha/village-servay/node_modules/cache-loader/dist/cjs.js","mtime":1626176668222},{"path":"/Users/pratyaphocha/village-servay/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1626179382467}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}